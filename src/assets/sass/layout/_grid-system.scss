// PROJECT GRID SYSTEM
// __________________________________________________________


// breakpoints variables and responsive mixin
// ______________________________________________________________________________________

$sm-bp: 768px;
$md-bp: 1024px;
$lg-bp: 1440px;

$sm-range: (0, $sm-bp - 1px);
$md-range: ($sm-bp, $md-bp - 1px);
$lg-range: ($md-bp, $lg-bp - 1px);

$md-down: $sm-bp - 1px;
$lg-down: $md-bp - 1px;

$breakpoints: (
    ('sm', $sm-range),
    ('md', $md-range),
    ('lg', $lg-range),
    ('xl', $lg-bp),
    ('sm-only', $sm-range),
    ('md-only', $md-range),
    ('lg-only', $lg-range),
    ('md-down', $md-down),
    ('lg-down', $lg-down)
);


@mixin resp($media) {
    @for $i from 1 through length($breakpoints) {
        $breakpoint: nth($breakpoints, $i);
        $name: nth($breakpoint, 1);
        $value: nth($breakpoint, 2);
 
        @if $media == $name {
            @if (str-index($name, '-only')) {
                @media (min-width: #{nth($value, 1)}) and (max-width: #{nth($value, 2)}) { @content; }
            } @else if (str-index($name, '-down')){
                @media (max-width: #{nth($value, 1)}) { @content; }
            } @else {
                @media (min-width: #{nth($value, 1)}) { @content; }
            }
        }
    }
}

// How to use it:

// @include resp($media)

//                          ||||    $sm-only: 0 to 767px        ||||    $sm: 0 to infinite;
//  $md-down: 0 to 767px    ||||    $md-only: 768px to 1023px   ||||    $md: 768px to infinite;
//  $lg-down: 0 to 1023px   ||||    $lg-only: 1024px to 1439px  ||||    $lg: 1024px to infinite;
//                          ||||                                ||||    $xl: 1440px to infinite;

// VARIABLES


// Desktop

$lg-ContainerMaxWidth: 1439px;
$lg-ContainerSideMargins: 80px;
$lg-ColsNumber: 12;
$lg-ColsGutters: 20px;

// tablet

$md-ContainerMaxWidth: 1023px;
$md-ContainerSideMargins: 80px;
$md-ColsNumber: 8;
$md-ColsGutters: 20px;

// mobile

$sm-ContainerMaxWidth: 767px;
$sm-ContainerSideMargins: 80px;
$sm-ColsNumber: 4;
$sm-ColsGutters: 20px;


$lg-grid-width: 100% - (($lg-ContainerSideMargins * 2 / $lg-ContainerMaxWidth) * 100%);
$md-grid-width: 100% - (($md-ContainerSideMargins * 2 / $md-ContainerMaxWidth) * 100%);
$sm-grid-width: 100% - (($sm-ContainerSideMargins * 2 / $sm-ContainerMaxWidth) * 100%);

$lg-gutter: (($lg-ColsGutters / ($lg-ContainerMaxWidth - ($lg-ContainerSideMargins * 2))) * 100%);
$md-gutter: (($md-ColsGutters / ($md-ContainerMaxWidth - ($md-ContainerSideMargins * 2))) * 100%);
$sm-gutter: (($sm-ColsGutters / ($sm-ContainerMaxWidth - ($sm-ContainerSideMargins * 2))) * 100%);

// FUNCTIONS AND MIXINS
@function col-width($i, $columns) {
    @return 100% / $columns * $i;
}
  
@mixin col-props($i, $columns, $gutter) {
    box-sizing: border-box;
    width: col-width($i, $columns);
    padding-left: $gutter/2;
    padding-right: $gutter/2;
}
  
@mixin columns-loop($name, $columns, $gutter) {
    @for $i from 0 through $columns {
        &-#{$name}-#{$i} {
            @include col-props($i, $columns, $gutter);
        }
        &-#{$name}-shift-#{$i} {
            margin-left: col-width($i, $columns);
        }
    }
}

@mixin row-base($width) {
    display: flex;
    margin-left: auto;
    margin-right: auto;
    flex-wrap: wrap;
    max-width: $lg-ContainerMaxWidth;
    width: $width;
}

// CLASSES
.row {
    @include row-base($lg-grid-width);
    @media screen and (max-width: $md-ContainerMaxWidth) {
      width: $md-grid-width;
    }
    @media screen and (max-width: $sm-ContainerMaxWidth) {
      width: $sm-grid-width;
    }
    &--fw {
      @include row-base(100%);
    }
  }
  
  .col {
    @include columns-loop(lg, $lg-ColsNumber, $lg-gutter);
    @media screen and (max-width: $md-ContainerMaxWidth) {
      @include columns-loop(md, $md-ColsNumber, $md-gutter);
    }
    @media screen and (max-width: $sm-ContainerMaxWidth) {
      @include columns-loop(sm, $sm-ColsNumber, $sm-gutter);
    }
  }

